{"version":3,"sources":["firebase/firebaseIndex.js","firebase/authmethods.js","provider/AuthProvider.js","component/Signin.js","component/Home.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","authMethods","signin","email","password","setErrors","setToken","auth","signInWithEmailAndPassword","then","res","a","Object","entries","user","b","token","localStorage","setItem","window","catch","err","prev","message","signout","signOut","removeItem","console","error","firebaseAuth","React","createContext","AuthProvider","props","useState","inputs","setInputs","errors","Provider","value","handleSignup","signup","log","handleSignin","handleSignout","children","Signin","useContext","handleChange","e","target","name","className","onSubmit","preventDefault","type","onChange","placeholder","length","map","style","color","getTodaysDateString","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","Home","loading","setLoading","trxItems","setTrxItems","expenseText","setExpenseText","expenseDate","setExpenseDate","expenseAmount","setExpenseAmount","expenseCat","setExpenseCat","catitems","setCatitems","useEffect","collection","doc","get","cat","exists","cats","data","catlist","sort","date","firstDayThisMonth","UTC","where","orderBy","querySnapshot","empty","forEach","obj","Amount","Category","Number","onClick","key","required","pattern","autoComplete","disabled","Comment","TrxDate","CatId","utcdate","slice","parseInt","add","StrDate","Income","synced","ref","keys","toFixed","App","exact","path","render","rProps","component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbd7c05a.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\n\nvar firebaseConfig = {\n      apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n      authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n      databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n      projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n      storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n      messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n      appId: process.env.REACT_APP_FIREBASE_APP_ID,\n//  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n// Initialize Firebase\nexport const firebaseApp = firebase.initializeApp(firebaseConfig);\n//export const fsTimestamp = firebase.firestore().Timestamp\n//firebase.analytics();\nexport const db = firebaseApp.firestore();\n","import {firebaseApp} from './firebaseIndex'\nimport 'firebase/auth'\n\nexport const authMethods = {\n  // firebase helper methods go here... \n  /*\n  signup: (email, password, setErrors,setToken ) => {\n    firebaseApp.auth().createUserWithEmailAndPassword(email,password) \n      //make res asynchonous so that we can make grab the token before saving it.\n      .then( async res => {\n        const token = await Object.entries(res.user)[5][1].b\n        //set token to localStorage \n        await localStorage.setItem('token', token)\n        setToken(token)\n        //grab token from local storage and set to state. \n          console.log(res)\n      })\n      .catch(err => {\n        setErrors(prev => ([...prev, err.message]))\n      })\n  },\n  */\n  signin: (email, password, setErrors, setToken) => {\n    //change from create users to...\n    firebaseApp.auth().signInWithEmailAndPassword(email, password) \n      //everything is almost exactly the same as the function above\n      .then( async res => {\n        const token = await Object.entries(res.user)[5][1].b\n          //set token to localStorage \n          await localStorage.setItem('token', token)\n          \n          \n          setToken(window.localStorage.token)\n        })\n        .catch(err => {\n          setErrors(prev => ([...prev, err.message]))\n        })\n  },\n  //no need for email and password\n  signout: (setErrors, setToken) => {\n      // signOut is a no argument function\n    firebaseApp.auth().signOut().then( res => {\n      //remove the token\n      localStorage.removeItem('token')\n        //set the token back to original state\n        setToken(null)\n  })\n  .catch(err => {\n      //there shouldn't every be an error from firebase but just in case\n      setErrors(prev => ([...prev, err.message]))\n      //whether firebase does the trick or not i want my user to do there thing.\n        localStorage.removeItem('token')\n          setToken(null)\n            console.error(err.message)\n    })\n  },\n}\n","import React, {useState} from 'react';\nimport {authMethods} from '../firebase/authmethods'\n\nexport const firebaseAuth = React.createContext()\n\nconst AuthProvider = (props) => {\n  const initState = {email: '', password: ''}\n  const [inputs, setInputs] = useState(initState)\n  const [errors, setErrors] = useState([])\n  const [token, setToken] = useState(null)\n\n\n  const handleSignup = () => {\n    authMethods.signup(inputs.email, inputs.password,setErrors ,setToken )\n    console.log(errors, token)\n  }\n  const handleSignin = () => {\n    authMethods.signin(inputs.email, inputs.password, setErrors, setToken)\n    console.log(errors, token)\n  }\n\n  const handleSignout = () => {\n    authMethods.signout(setErrors, setToken)\n  }\n\n  return (\n    <firebaseAuth.Provider\n    value={{\n      handleSignup,\n      handleSignin,\n      token,\n      inputs,\n      setInputs,\n      errors,\n      handleSignout,\n    }}>\n      {props.children}\n    </firebaseAuth.Provider>\n  );\n};\n\nexport default AuthProvider;\n","// add useContext\nimport React, {useContext} from 'react';\nimport {firebaseAuth} from '../provider/AuthProvider'\n\nconst Signin = () => {\n\n  const version = process.env.REACT_APP_VERSION\n  console.log(version)\n  const {handleSignin, inputs, setInputs, errors} = useContext(firebaseAuth)\n  \n  const handleSubmit = (e) => {\n    e.preventDefault()\n    console.log('handleSubmit')\n    handleSignin()\n    \n  }\n  const handleChange = e => {\n    const {name, value} = e.target\n    console.log(inputs)\n    setInputs(prev => ({...prev, [name]: value}))\n  }\n\n  return (\n    <div className=\"App signin\">\n      <h1 className=\"\">Sign In</h1>\n      <form className=\"\" onSubmit={handleSubmit}>\n        <input type=\"email\" onChange={handleChange} name=\"email\" placeholder='email' value={inputs.email} />\n        <input type=\"password\" onChange={handleChange} name=\"password\" placeholder='password' value={inputs.password} />\n        <button className=\"button green\">signin</button>\n        {errors.length > 0 ? errors.map(error => <p style={{color: 'red'}}>{error}</p> ) : null}\n      </form>\n      <h4>version:{version}</h4>\n    </div>\n  );\n};\n\nexport default Signin;\n","import React, {useContext, useState, useEffect} from 'react';\nimport {firebaseAuth} from '../provider/AuthProvider'\nimport {db} from '../firebase/firebaseIndex'\n\n/**\n * Returns todays date as string in format YYYY-MM-DD\n * @return {string}\n */\nfunction getTodaysDateString() {\n  let today = new Date();\n  let dd = today.getDate();\n  let mm = today.getMonth()+1;\n  const yyyy = today.getFullYear();\n  if(dd<10)\n  {\n      dd=`0${dd}`;\n  }\n\n  if(mm<10)\n  {\n      mm=`0${mm}`;\n  }\n  today = `${yyyy}-${mm}-${dd}`;\n  console.log(today);\n  return today;\n}\n\nconst Home = (props) => {\n\n  const {handleSignout,} = useContext(firebaseAuth)\n  const [loading, setLoading] = useState(true);\n  const [trxItems, setTrxItems] = useState({});\n  const [expenseText, setExpenseText] = useState(\"\");\n  const [expenseDate, setExpenseDate] = useState(getTodaysDateString);\n  const [expenseAmount, setExpenseAmount] = useState(0);\n  const [expenseCat, setExpenseCat] = useState(\"Empty\");\n  const [catitems, setCatitems] = useState([]);\n  //const catitems = [\"Alcohol\",\"Autopac\",\"Auto Gas\",\"Auto License\",\"Auto Maint\",\"Boat\",\"Camping\",\"Clothing\",\"Dine Out\",\"Exercise\",\"Fishing\",\"Grandkids\" ,\"Grocery\",\"Holiday\",\"House\",\"Lotto\",\"Misc\",\"Prescription\"];\n\n  const handleExpenseTextChange = (e) => {\n    setExpenseText(e.target.value);\n  };\n  const handleExpenseDateChange = (e) => {\n    setExpenseDate(e.target.value);\n  };\n  const handleExpenseAmountChange = (e) => {\n    setExpenseAmount(e.target.value);\n  };\n  const handleExpenseCatChange = (e) => {\n    setExpenseCat(e.target.value);\n  };\n  \n  useEffect(()=>{\n    const catRef = db.collection('category').doc('categorys');\n    catRef.get()\n      .then((cat)=>{\n        if (!cat.exists){\n          console.log('No matching documents.');\n        } else {\n          const cats = cat.data()\n          console.log(\"Cat:\",cats.catlist);\n          setCatitems(cats.catlist.sort());\n        }\n\n      })\n  },[]);\n\n  useEffect(()=>{\n    var startfulldate = new Date();\n    var date = new Date();\n    var firstDayThisMonth = new Date(Date.UTC(date.getFullYear(), date.getMonth(), 1));\n    const trxRef = db.collection('transactions');\n    trxRef.where('TrxDate', '>=', firstDayThisMonth)\n      //.orderBy('TrxDate','desc').limit(5)\n      .orderBy('TrxDate','desc')\n      .get()\n     .then((querySnapshot) => {\n        if (querySnapshot.empty) {\n          console.log('No matching documents.');\n          return;\n        }\n        /*\n        const data = querySnapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data(),\n        }));\n        */\n        //if we want to calculate totals can't use map\n        const data = {'Monthly Total': 0}\n        querySnapshot.forEach(doc => {\n          const obj = doc.data()\n          data['Monthly Total'] += obj.Amount\n          if (obj.Category in data) {\n            data[obj.Category] += Number(obj.Amount)\n          }\n          else {\n            //you need to assign 0 to the key of you get NaN adding undefined to Amount\n            data[obj.Category] = 0\n            data[obj.Category] += Number(obj.Amount)\n          }\n        });\n        setTrxItems(data)\n        console.log(\"Transactions: \", data);\n    })\n  },[loading]);\n\n  const handleAddTransaction = (e) => {\n    //sendTransaction({ Comment: expenseText, TrxDate: expenseDate,CatId: Number(expenseCat) , Amount: Number(expenseAmount) });\n    console.log({ Comment: expenseText, TrxDate: expenseDate,CatId: expenseCat , Amount: Number(expenseAmount) })\n    //it seems that new Date(YYYY-MM-DD) creates a UTC timestamp at 00:00:00 so 2020-10-22 is 2020-10-21 19:00:00 GMT-5\n    //What I want is the date string I put in for current timezone, but still have firestore index by date\n    //firestore stores a UTC timestamp\n    //These both give the same datetime\n    const utcdate = new Date (Date.UTC(expenseDate.slice(0,4),parseInt(expenseDate.slice(5,7))-1,parseInt(expenseDate.slice(8,10))))\n    //console.log(utcdate.toUTCString())\n    //console.log(new Date(expenseDate))\n    //need to add time so it will be created as localtime\n    //console.log(new Date(expenseDate+\"T00:00:00\"))\n    //With time works on the desktop browser but not on the iphone.\n    //New Plan, store TrxDate as UTC using Date.UTC \n    //add a string field StrDate that stores 2020-10-24 NOT NEEDED\n    //query using UTC \n    db.collection(\"transactions\").add({\n      Comment: expenseText,\n      //TrxDate: new Date(expenseDate+\"T00:00:00\"),\n      TrxDate:utcdate,\n      StrDate: expenseDate,\n      Category: expenseCat ,\n      Amount: Number(expenseAmount),\n      Income: false,\n      synced: false\n    })\n    .then(function(ref) {\n        //console.log(\"Document successfully written with TrxDate! \",ref.TrxDate.toDate().toDateString());\n        console.log(\"Document successfully written with TrxDate! \",ref);\n    })\n    .catch(function(error) {\n        console.error(\"Error writing document: \", error);\n    });\n    //\n    setExpenseAmount(0);\n    setExpenseText(\"\");\n    setExpenseCat(\"Empty\")\n    setLoading(!loading)\n  };\n\n  /***\n   * I want to show the current month totals per category instead of the last 5 expenses.\n   * The timestamp stored in firestore is UTC timestamp so I need the UTC timestamp for midnight first day of month.\n   *\n   ****/\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h1 className=\"heading\">Add Transaction</h1>\n        <button className=\"heading red\" onClick={handleSignout}>sign out </button>\n      </div>\n      <div className=\"add-transaction\">\n        <select\n          value={expenseCat}\n          onChange={handleExpenseCatChange}\n        >\n          <option key=\"Empty\" value=\"Empty\">Empty</option>\n          {catitems.map(( value ) => (\n            <option key={value} value={value}>\n              {value}\n            </option>\n          ))}\n        </select>\n        <input\n          type=\"date\"\n          name=\"expenseDate\"\n          value={expenseDate}\n          required\n          pattern=\"\\d{4}-\\d{2}-\\d{2}\"\n          autoComplete=\"off\"\n          onChange={handleExpenseDateChange}\n        />\n        <input\n          type=\"number\"\n          name=\"expenseAmount\"\n          value={expenseAmount}\n          placeholder=\"Amount\"\n          autoComplete=\"off\"\n          onChange={handleExpenseAmountChange}\n        />\n        <input\n          type=\"text\"\n          name=\"expenseText\"\n          value={expenseText}\n          placeholder=\"Add Expense Comment...\"\n          autoComplete=\"off\"\n          onChange={handleExpenseTextChange}\n        />\n        <button className=\"button green\" type=\"submit\"\n          disabled={!expenseText || !expenseAmount || !expenseDate || expenseCat === 'Empty'}\n          onClick={handleAddTransaction}\n        >\n          submit\n        </button>\n      </div>\n      <div className=\"transactions\">\n        <h1>Month Totals</h1>\n          <ul className=\"transaction-list\">\n            {Object.keys(trxItems).length === 0 ? <ul>Loading</ul> : Object.keys(trxItems).map(\n              key => <li key={key}><span>{key}</span><span>${trxItems[key].toFixed(2)}</span></li>\n            )}\n          </ul>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, {useContext} from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom'\nimport Signin from './component/Signin'\nimport Home from './component/Home'\nimport {firebaseAuth} from './provider/AuthProvider'\n\nfunction App() {\n  const { token } = useContext(firebaseAuth)\n  //console.log(token)\n  return (\n    <>\n    {/* switch allows switching which components render.  */}\n      <Switch>\n        {/* route allows you to render by url path */}\n\n        <Route exact path='/' render={rProps => token === null ? <Signin /> : <Home />} />\n        <Route exact path='/signin' component={Signin} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AuthProvider from './provider/AuthProvider'\n//import {BrowserRouter} from 'react-router-dom'\nimport {HashRouter} from 'react-router-dom'\nReactDOM.render(\n<HashRouter>\n  <AuthProvider>\n    <App />\n  </AuthProvider>\n</HashRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}